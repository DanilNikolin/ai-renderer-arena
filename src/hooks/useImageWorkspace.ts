// src/hooks/useImageWorkspace.ts

import { useState, useMemo, useEffect, useRef, ChangeEvent, DragEvent, KeyboardEvent } from "react";
import { FluxSettings, LlmSettings, Model, QwenSettings } from "@/lib/types";
import { loadPersist, readImageDims, savePersist } from "@/lib/utils";

const initialLlmSettings: LlmSettings = {
  model: 'gpt-5-mini',
  systemPrompt: `–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ¬´–ü—Ä–æ–º—Ç-–ò–Ω–∂–µ–Ω–µ—Ä¬ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ AI-–†–µ–Ω–¥–µ—Ä–µ—Ä.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞—É–Ω—ã –∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤) –∏ —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Qwen-Image-Edit).

–ê–ª–≥–æ—Ä–∏—Ç–º:

–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±—ä–µ–∫—Ç–æ–≤, —Ä–µ–∞–ª—å–Ω–æ –≤–∏–¥–∏–º—ã—Ö –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–µ.
–ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

–ì–µ–æ–º–µ—Ç—Ä–∏—è
–í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π:
¬´–°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ—á–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é, –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, —Ä–∞–∫—É—Ä—Å –∏ FOV —Å—Ü–µ–Ω—ã; –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å.¬ª

–ú–∞—Ç–µ—Ä–∏–∞–ª—ã
–ó–∞–º–µ–Ω–∏ –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.
–û–ø–∏—à–∏ –∏—Ö –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ: –¥–µ—Ä–µ–≤–æ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π –æ—Ç—Ç–µ–Ω–∫–æ–≤, —Å—É—á–∫–∞–º–∏, –¥–µ—Ñ–µ–∫—Ç–∞–º–∏; –∞–±–∞—à–∏ —Å –º–∞—Ç–æ–≤–æ–π –æ—Ç–¥–µ–ª–∫–æ–π; –ø–ª–∏—Ç–∫–∞ —Å–æ —à–≤–∞–º–∏; –º–µ—Ç–∞–ª–ª –ø–µ—á–∏ –º–∞—Ç–æ–≤—ã–π; –∫–∞–º–Ω–∏ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç—ã–µ.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Ä–æ–¥–µ albedo, normal, AO. –ü–∏—à–∏: ¬´–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PBR-—Ç–µ–∫—Å—Ç—É—Ä—ã¬ª.

–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è (‚ö°)
–ï—Å–ª–∏ –µ—Å—Ç—å —á—ë—Ä–Ω—ã–µ –ø—É—Å—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏, –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∏—Ö –∑–∞–º–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚ö° –ß—ë—Ä–Ω–∞—è —Å—Ç–µ–Ω–∞ = –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∏–¥–æ–º –Ω–∞ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã–π —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π –ª–µ—Å –¥–Ω—ë–º, –º—è–≥–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä—å.
‚ö° –ß—ë—Ä–Ω—ã–π –¥–≤–µ—Ä–Ω–æ–π –ø—Ä–æ—ë–º = –ø—Ä–µ–¥–±–∞–Ω–Ω–∏–∫: —Å–≤–µ—Ç–ª—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä, –æ—Ç–¥–µ–ª–∞–Ω–Ω—ã–π —Ç–µ–º –∂–µ –¥–µ—Ä–µ–≤–æ–º, —á—Ç–æ –∏ —Å—Ç–µ–Ω—ã —Å–∞—É–Ω—ã.
üëâ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ ¬´—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π¬ª ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–≥—É—é —Ñ–æ—Ä–º—É ¬´=¬ª.

–°–≤–µ—Ç
–í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π: ¬´–°–≤–µ—Ç —Ç—ë–ø–ª—ã–π, –º—è–≥–∫–∏–π, —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–µ–Ω—è–º–∏; –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏.¬ª

–î–ª–∏–Ω–∞
–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5‚Äì7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
–ù–µ –ø—Ä–µ–≤—Ä–∞—â–∞–π —Ç–µ–∫—Å—Ç –≤ ¬´–≤–æ–π–Ω—É –∏ –º–∏—Ä¬ª ‚Äî –≥–ª–∞–≤–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã: –≥–µ–æ–º–µ—Ç—Ä–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ–∫–Ω–æ, –¥–≤–µ—Ä—å, —Å–≤–µ—Ç.'.`,
  temperature: 1.0,
  topP: 1,
  maxCompletionTokens: 2000,
};

const MAX_FILE_SIZE_MB = 10;
const ACCEPTED_FILE_TYPES = ["image/png", "image/jpeg", "image/webp"];

export function useImageWorkspace() {
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è (State) ---
  const [sourceFile, setSourceFile] = useState<File | null>(null);
  const [sourceUrl, setSourceUrl] = useState<string | null>(null);
  const [resultUrl, setResultUrl] = useState<string | null>(null);
  const [prompt, setPrompt] = useState("");
  const [rawPrompt, setRawPrompt] = useState("");
  const [isRefining, setIsRefining] = useState(false);
  const [refineError, setRefineError] = useState<string | null>(null);
  const [sendImageToLlm, setSendImageToLlm] = useState(true);
  const [showRefiner, setShowRefiner] = useState(false);
  const [llmSettings, setLlmSettings] = useState<LlmSettings>(initialLlmSettings);
  const [negativePrompt, setNegativePrompt] = useState("blurry, ugly, deformed, text, watermark");
  const [showNeg, setShowNeg] = useState(false);
  const [selectedModel, setSelectedModel] = useState<Model>("flux");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [imageInfo, setImageInfo] = useState<{ w: number; h: number } | null>(null);
  const [tab, setTab] = useState<"source" | "result" | "compare">("source");
  const [comparePos, setComparePos] = useState(50);
  const [seedLock, setSeedLock] = useState(false);
  const [qwenSettings, setQwenSettings] = useState<QwenSettings>({ guidance_scale: 4, num_inference_steps: 30, seed: 0 });
  const [fluxSettings, setFluxSettings] = useState<FluxSettings>({ guidance_scale: 3.5, safety_tolerance: 2, seed: 0 });

  const abortControllerRef = useRef<AbortController | null>(null);
  const dropRef = useRef<HTMLLabelElement | null>(null);

  // --- –≠—Ñ—Ñ–µ–∫—Ç—ã (Effects) ---

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const p = loadPersist();
    if (!p) return;

    setPrompt(p.prompt ?? "");
    setNegativePrompt(p.negativePrompt ?? "blurry, ugly, deformed, text, watermark");
    setSelectedModel(p.selectedModel ?? "flux");
    setQwenSettings(p.qwenSettings ?? { guidance_scale: 4, num_inference_steps: 30, seed: 0 });
    setFluxSettings(p.fluxSettings ?? { guidance_scale: 3.5, safety_tolerance: 2, seed: 0 });
    if (p.llmSettings) setLlmSettings(p.llmSettings);
    if (typeof p.sendImageToLlm === "boolean") setSendImageToLlm(p.sendImageToLlm);
    if (typeof p.showRefiner === "boolean") setShowRefiner(p.showRefiner);
    if (typeof p.showNeg === "boolean") setShowNeg(p.showNeg);
    if (typeof p.seedLock === "boolean") setSeedLock(p.seedLock);
    if (p.tab) setTab(p.tab);
    if (typeof p.comparePos === "number") setComparePos(p.comparePos);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    savePersist({
      prompt,
      negativePrompt,
      selectedModel,
      qwenSettings,
      fluxSettings,
      llmSettings,
      sendImageToLlm,
      showRefiner,
      showNeg,
      seedLock,
      tab,
      comparePos,
    });
  }, [
    prompt,
    negativePrompt,
    selectedModel,
    qwenSettings,
    fluxSettings,
    llmSettings,
    sendImageToLlm,
    showRefiner,
    showNeg,
    seedLock,
    tab,
    comparePos,
  ]);
  
  // –û—á–∏—Å—Ç–∫–∞ Object URL –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (sourceUrl) URL.revokeObjectURL(sourceUrl);
    };
  }, [sourceUrl]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  useEffect(() => {
    const handler = (ev: ClipboardEvent) => onPaste(ev);
    window.addEventListener("paste", handler);
    return () => window.removeEventListener("paste", handler);
  }, []); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—É—Å—Ç—ã–µ, —Ç.–∫. onPaste –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ö—É–∫–∞


  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ ---

  const handleQwenChange = (e: ChangeEvent<HTMLInputElement>) => {
    setQwenSettings((p) => ({ ...p, [e.target.name]: Number(e.target.value) }));
  };
  const handleFluxChange = (e: ChangeEvent<HTMLInputElement>) => {
    setFluxSettings((p) => ({ ...p, [e.target.name]: Number(e.target.value) }));
  };
  
  const onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {
    if (e.key === "Enter" && (e.metaKey || e.ctrlKey || (e.target as HTMLElement).tagName !== "TEXTAREA")) {
      e.preventDefault();
      onGenerate();
    }
    if (e.key === "Escape") {
      if (isLoading) onCancel();
    }
  };

  const handleLlmSettingsChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    setLlmSettings(prev => ({
      ...prev,
      [name]: type === 'number' ? parseFloat(value) : value,
    }));
  };
  
  const onRefinePrompt = async () => {
    if (!rawPrompt.trim()) return;
    setIsRefining(true);
    setRefineError(null);
    abortControllerRef.current = new AbortController();

    function arrayBufferToBase64(buffer: ArrayBuffer): string {
      let binary = "";
      const bytes = new Uint8Array(buffer);
      const chunkSize = 0x8000;
      for (let i = 0; i < bytes.length; i += chunkSize) {
        const chunk = bytes.subarray(i, i + chunkSize);
        binary += String.fromCharCode.apply(null, Array.from(chunk));
      }
      return btoa(binary);
    }

    let base64Image: string | undefined = undefined;
    if (sendImageToLlm && sourceFile) {
      const buffer = await sourceFile.arrayBuffer();
      base64Image = `data:${sourceFile.type};base64,${arrayBufferToBase64(buffer)}`;
    }

    const payload = {
      prompt: rawPrompt,
      model: llmSettings.model,
      system: llmSettings.systemPrompt,
      temperature: llmSettings.temperature,
      top_p: llmSettings.topP,
      max_completion_tokens: llmSettings.maxCompletionTokens,
      ...(base64Image ? { image: base64Image } : {}),
    };

    try {
      const response = await fetch("/api/refine-prompt", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
        signal: abortControllerRef.current.signal,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API");
      }

      const data = await response.json();
      setPrompt(data.refinedPrompt);
      setShowRefiner(false);
    } catch (e: unknown) {
      if (e instanceof Error) {
        if (e.name === "AbortError") setRefineError("–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        else setRefineError(e.message);
      } else {
        setRefineError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
      }
    } finally {
      setIsRefining(false);
    }
  };

  const isReadyToGenerate = useMemo(() => !!sourceFile && !!prompt.trim() && !isLoading, [sourceFile, prompt, isLoading]);

  const fail = (msg: string) => {
    setError(msg);
    setIsLoading(false);
  };

  const handleFileSelect = async (file: File) => {
    if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) return fail(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${MAX_FILE_SIZE_MB} MB.`);
    if (!ACCEPTED_FILE_TYPES.includes(file.type)) return fail("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PNG, JPEG –∏–ª–∏ WebP.");
    
    setError(null);
    setResultUrl(null);
    setTab("source");
    setSourceFile(file);
    if (sourceUrl) URL.revokeObjectURL(sourceUrl);
    const url = URL.createObjectURL(file);
    setSourceUrl(url);
    try {
      const dims = await readImageDims(file);
      setImageInfo(dims);
    } catch {
      setImageInfo(null);
    }
  };
  
  const onFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) handleFileSelect(file);
    e.target.value = "";
  };
  
  const onDrop = (e: DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (file) handleFileSelect(file);
  };
  
  const onPaste = async (e: ClipboardEvent) => {
    const items = e.clipboardData?.items;
    if (!items) return;
    for (const it of items) {
      if (it.type.startsWith("image/")) {
        const file = it.getAsFile();
        if (file) {
          await handleFileSelect(file);
          break;
        }
      }
    }
  };

  const onClear = () => {
    if (sourceUrl) URL.revokeObjectURL(sourceUrl);
    setSourceFile(null);
    setSourceUrl(null);
    setResultUrl(null);
    setError(null);
    setPrompt("");
    setImageInfo(null);
    setTab("source");
    setShowRefiner(false);
    setShowNeg(false);
    setSendImageToLlm(true);
    setSeedLock(false);
    setComparePos(50);
  };

  const onCancel = () => {
    abortControllerRef.current?.abort();
    setIsLoading(false);
    setError("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  };

  const randomizeSeed = () => {
    const seed = Math.floor(Math.random() * 2_147_483_647);
    if (selectedModel === "flux") setFluxSettings((p) => ({ ...p, seed }));
    if (selectedModel === "qwen") setQwenSettings((p) => ({ ...p, seed }));
  };
  
  const onGenerate = async () => {
    if (!isReadyToGenerate || !sourceFile) return;
    setIsLoading(true);
    setError(null);
    setResultUrl(null);
    abortControllerRef.current = new AbortController();

    const formData = new FormData();
    formData.append("image", sourceFile);
    formData.append("prompt", prompt);
    formData.append("negative_prompt", negativePrompt);
    formData.append("model", selectedModel);

    let settings: QwenSettings | FluxSettings;
    if (selectedModel === "qwen") {
      settings = qwenSettings;
    } else {
      settings = fluxSettings;
    }
    
    if (!seedLock) {
      const seed = Math.floor(Math.random() * 2_147_483_647);
      settings = { ...settings, seed };
      if (selectedModel === "flux") setFluxSettings(p => ({ ...p, seed }));
      if (selectedModel === "qwen") setQwenSettings(p => ({ ...p, seed }));
    }

    formData.append("settings", JSON.stringify(settings));

    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        body: formData,
        signal: abortControllerRef.current.signal,
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API");
      }
      const data = await response.json();
      setResultUrl(data.imageUrl);
      setTab("result");
    } catch (e: unknown) {
      if (e instanceof Error) {
        if (e.name === "AbortError") setError("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        else setError(e.message);
      } else {
        setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  // --- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API —Ö—É–∫–∞ ---
  return {
    sourceFile,
    sourceUrl,
    resultUrl,
    prompt,
    setPrompt,
    rawPrompt,
    setRawPrompt,
    isRefining,
    refineError,
    sendImageToLlm,
    setSendImageToLlm,
    showRefiner,
    setShowRefiner,
    llmSettings,
    setLlmSettings,
    handleLlmSettingsChange,
    negativePrompt,
    setNegativePrompt,
    showNeg,
    setShowNeg,
    selectedModel,
    setSelectedModel,
    isLoading,
    error,
    imageInfo,
    tab,
    setTab,
    comparePos,
    setComparePos,
    seedLock,
    setSeedLock,
    qwenSettings,
    handleQwenChange,
    fluxSettings,
    handleFluxChange,
    dropRef,
    onKeyDown,
    onRefinePrompt,
    isReadyToGenerate,
    onFileChange,
    onDrop,
    onClear,
    onCancel,
    randomizeSeed,
    onGenerate,
  };
}